{"version":3,"sources":["context/AppContext.tsx","components/TaskListForm/TaskListForm.tsx","components/TaskListItem/TaskListItem.tsx","components/TaskListItems/TaskListItems.tsx","components/TaskLabel/TaskLabel.tsx","components/TaskItem/TaskItem.tsx","components/TaskForm/TaskForm.tsx","components/TaskList/TaskList.tsx","components/TaskLabelFormItem/TaskLabelFormItem.tsx","components/TaskLabelForm/TaskLabelForm.tsx","components/TaskPanel/TaskPanel.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["AppContext","createContext","taskLists","selectedTaskList","selectedTask","setTaskLists","setSelectedTaskList","setSelectedTask","useAppContext","useContext","TaskListForm","useState","taskListName","setTaskListName","className","placeholder","value","onChange","event","target","onKeyDown","key","test","id","uuidv4","newTaskList","listId","listName","listItems","newTaskLists","maxLength","TaskListItem","taskList","onClick","style","color","length","TaskListItems","Object","keys","taskListsArray","values","reverse","map","index","mapTaskListItem","TaskLabel","labelName","backgroundColor","TaskItem","task","taskName","setTaskName","taskCompleted","setTaskCompleted","taskLabelName","setTaskLabelName","useEffect","label","listItemName","completed","labels","listItemId","newSelectedTaskList","newTasks","newTask","isCompleted","onFocus","newTaskName","TaskForm","type","name","selected","HIGH","MEDIUM","LOW","autoComplete","TaskList","setListName","numberOfTasks","setNumberOfTasks","numberOfCompletedTasks","setNumberOfCompletedTasks","taskItems","setTaskItems","countCompletedTasks","count","numCompletedTask","displayTaskList","TaskLabelFormItem","handleClick","TaskLabelForm","high","medium","low","setLabels","listItem","clickedLabel","currentTarget","newLabels","TaskPanel","App","Provider","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1eba4d9e.chunk.js","sourcesContent":["import { createContext, useContext } from \"react\";\r\nimport { Lists } from \"../interfaces/Lists\";\r\n\r\nexport type AppType = {\r\n    taskLists: Lists | null;\r\n    selectedTaskList: string;\r\n    selectedTask: string;\r\n    setTaskLists: (taskLists: Lists) => void;\r\n    setSelectedTaskList: (taskListId: string) => void;\r\n    setSelectedTask: (taskId: string) => void;\r\n};\r\n\r\nexport const AppContext = createContext<AppType>({\r\n    taskLists: null,\r\n    selectedTaskList: '',\r\n    selectedTask: '',\r\n    setTaskLists: () => { },\r\n    setSelectedTaskList: () => { },\r\n    setSelectedTask: () => { },\r\n});\r\n\r\nexport const useAppContext = () => useContext(AppContext);","import React, { useState, ChangeEvent, KeyboardEvent } from 'react';\r\nimport './TaskListForm.css';\r\nimport { useAppContext } from '../../context/AppContext';\r\nimport { List } from '../../interfaces/List';\r\nimport { MdAdd } from \"react-icons/md\";\r\nimport { v4 as uuidv4 } from 'uuid';\r\n\r\nconst TaskListForm = () => {\r\n\r\n    const [taskListName, setTaskListName] = useState('');\r\n\r\n    const {\r\n        taskLists,\r\n        setTaskLists,\r\n        setSelectedTaskList,\r\n        setSelectedTask\r\n    } = useAppContext();\r\n\r\n    const handleChange = (event: ChangeEvent<HTMLInputElement>): void => {\r\n        setTaskListName(event.target.value);\r\n    }\r\n\r\n    const handleKeyDown = (event: KeyboardEvent): void => {\r\n        if (event.key === 'Enter' && /\\S/.test(taskListName)) {\r\n            const id = uuidv4();\r\n            const newTaskList: List = {\r\n                listId: id,\r\n                listName: taskListName,\r\n                listItems: [],\r\n            };\r\n            const newTaskLists = { ...taskLists };\r\n            newTaskLists[id] = newTaskList;\r\n            setTaskLists(newTaskLists);\r\n            setSelectedTaskList(id);\r\n            setSelectedTask('');\r\n            setTaskListName('');\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"task-lists\">\r\n            <div className=\"task-list-item-container\">\r\n                <div className=\"icon-container\">\r\n                    <MdAdd />\r\n                </div>\r\n                <input\r\n                    placeholder=\"Create a task list\"\r\n                    value={taskListName}\r\n                    onChange={handleChange}\r\n                    onKeyDown={handleKeyDown}\r\n                    maxLength={20}\r\n                />\r\n            </div>\r\n        </div>\r\n    );\r\n\r\n}\r\n\r\nexport default TaskListForm;","import React from 'react';\r\nimport { List } from '../../interfaces/List';\r\nimport { useAppContext } from '../../context/AppContext';\r\nimport './TaskListItem.css';\r\n\r\ninterface Props {\r\n    taskList: List;\r\n}\r\n\r\nconst TaskListItem = ({ taskList }: Props) => {\r\n\r\n    const { listId, listName, listItems } = taskList;\r\n\r\n    const {\r\n        taskLists,\r\n        selectedTaskList,\r\n        setSelectedTaskList,\r\n        setSelectedTask\r\n    } = useAppContext();\r\n\r\n    const handleOnClick = (): void => {\r\n        if (taskLists) {\r\n            setSelectedTaskList(listId);\r\n            setSelectedTask('');\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div\r\n            className=\"task-list-item\"\r\n            onClick={handleOnClick}\r\n            style={{\r\n                color: selectedTaskList === listId ? '#FFFFFF' : '#b4b4b4',\r\n            }}\r\n        >\r\n            <div>{listName}</div>\r\n            <div className=\"task-list-size\">\r\n                <div>{listItems.length}</div>\r\n            </div>\r\n        </div>\r\n    );\r\n\r\n}\r\n\r\nexport default TaskListItem;","import React from 'react';\r\nimport { useAppContext } from '../../context/AppContext';\r\nimport TaskListItem from '../TaskListItem/TaskListItem';\r\n\r\nconst TaskListItems = () => {\r\n\r\n    const { taskLists } = useAppContext();\r\n\r\n    const mapTaskListItem = (): JSX.Element | null => {\r\n        if (taskLists !== null && Object.keys(taskLists).length) {\r\n            const taskListsArray = Object.values(taskLists).reverse();\r\n            return (\r\n                <>\r\n                    {taskListsArray.map((taskList, index) => <TaskListItem key={index} taskList={taskList} />)}\r\n                </>\r\n            );\r\n        }\r\n        return null;\r\n    }\r\n\r\n    return (<div>{mapTaskListItem()}</div>);\r\n\r\n}\r\n\r\nexport default TaskListItems;","import React from 'react';\r\nimport './TaskLabel.css';\r\n\r\ninterface Props {\r\n    labelName: string;\r\n}\r\n\r\nconst TaskLabel = ({ labelName }: Props) => {\r\n\r\n    const getLabelColour = () => {\r\n        if (labelName === 'High') {\r\n            return '#c62828';\r\n        }\r\n        if (labelName === 'Medium') {\r\n            return '#ff6f00';\r\n        }\r\n        if (labelName === 'Low') {\r\n            return '#43a047';\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div\r\n            className=\"task-label\"\r\n            style={{\r\n                backgroundColor: getLabelColour()\r\n            }}\r\n        >\r\n            {labelName} Priority\r\n        </div>\r\n    );\r\n\r\n}\r\n\r\nexport default TaskLabel;","import React, { useState, useEffect, ChangeEvent } from 'react';\r\nimport { ListItem } from '../../interfaces/ListItem';\r\nimport { MdOutlineCheckBoxOutlineBlank, MdOutlineCheckBox } from \"react-icons/md\";\r\nimport { BiDotsHorizontalRounded } from \"react-icons/bi\";\r\nimport { useAppContext } from '../../context/AppContext';\r\nimport './TaskItem.css';\r\nimport TaskLabel from '../TaskLabel/TaskLabel';\r\n\r\ninterface Props {\r\n    task: ListItem | null;\r\n}\r\n\r\nconst TaskItem = ({ task }: Props) => {\r\n\r\n    const [taskName, setTaskName] = useState('');\r\n    const [taskCompleted, setTaskCompleted] = useState(false);\r\n    const [taskLabelName, setTaskLabelName] = useState('');\r\n\r\n    const {\r\n        taskLists,\r\n        selectedTaskList,\r\n        selectedTask,\r\n        setTaskLists,\r\n        setSelectedTaskList,\r\n        setSelectedTask,\r\n    } = useAppContext();\r\n\r\n    useEffect(() => {\r\n        if (task !== null) {\r\n            setTaskName(task.listItemName);\r\n            setTaskCompleted(task.completed);\r\n            for (const label in task.labels) {\r\n                if (task.labels[label] === true) {\r\n                    if (label === 'HIGH') {\r\n                        setTaskLabelName('High');\r\n                        break;\r\n                    }\r\n                    if (label === 'MEDIUM') {\r\n                        setTaskLabelName('Medium');\r\n                        break;\r\n                    }\r\n                    if (label === 'LOW') {\r\n                        setTaskLabelName('Low');\r\n                        break;\r\n                    }\r\n                } else {\r\n                    setTaskLabelName('');\r\n                }\r\n            }\r\n        }\r\n    }, [task, taskLists]);\r\n\r\n    const completeTask = () => {\r\n        if (task && taskLists !== null && selectedTaskList !== '') {\r\n            const newSelectedTaskList = taskLists[selectedTaskList];\r\n            const { listId, listItems } = newSelectedTaskList;\r\n            const newTasks = [...listItems];\r\n            for (const newTask of newTasks) {\r\n                if (newTask.listItemId === task.listItemId) {\r\n                    const isCompleted = !task.completed;\r\n                    setTaskCompleted(isCompleted)\r\n                    newTask.completed = isCompleted;\r\n                }\r\n            }\r\n            const newTaskLists = { ...taskLists };\r\n            newTaskLists[listId] = newSelectedTaskList;\r\n            setTaskLists(newTaskLists);\r\n            setSelectedTaskList(newSelectedTaskList.listId);\r\n        }\r\n    }\r\n\r\n    const onInputChange = (event: ChangeEvent<HTMLInputElement>) => {\r\n        if (task && taskLists !== null && selectedTaskList !== '') {\r\n            const newSelectedTaskList = taskLists[selectedTaskList];\r\n            const { listId, listItems } = newSelectedTaskList;\r\n            const newTasks = [...listItems];\r\n            for (const newTask of newTasks) {\r\n                if (newTask.listItemId === task.listItemId) {\r\n                    const newTaskName = event.target.value;\r\n                    setTaskName(newTaskName)\r\n                    newTask.listItemName = (newTaskName);\r\n                }\r\n            }\r\n            const newTaskLists = { ...taskLists };\r\n            newTaskLists[listId] = newSelectedTaskList;\r\n            setTaskLists(newTaskLists);\r\n            setSelectedTaskList(newSelectedTaskList.listId);\r\n            setSelectedTask(task.listItemId);\r\n        }\r\n    }\r\n\r\n    const onFocus = () => {\r\n        if (task) {\r\n            setSelectedTask(task.listItemId);\r\n        }\r\n    }\r\n\r\n    const editTask = () => {\r\n        if (selectedTask === task?.listItemId) {\r\n            setSelectedTask('');\r\n            return;\r\n        }\r\n        if (task) {\r\n            setSelectedTask(task.listItemId);\r\n            return;\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div\r\n            className=\"task\"\r\n            style={{\r\n                backgroundColor:\r\n                    selectedTask === task?.listItemId\r\n                        ? '#e0e0e0'\r\n                        : '#ffffff'\r\n            }}\r\n        >\r\n            {\r\n                taskLabelName !== '' &&\r\n                <div className=\"task-labels-container\">\r\n                    <TaskLabel labelName={taskLabelName} />\r\n                </div>\r\n            }\r\n            <div className=\"task-content-container\">\r\n                <div className=\"task-content\">\r\n                    <div className=\"task-completed\" onClick={completeTask}>\r\n                        {\r\n                            taskCompleted ?\r\n                                <MdOutlineCheckBox className=\"completed-true\" /> :\r\n                                <MdOutlineCheckBoxOutlineBlank className=\"completed-false\" />\r\n                        }\r\n                    </div>\r\n                    <input\r\n                        className=\"task-name\"\r\n                        value={taskName}\r\n                        onFocus={onFocus}\r\n                        onChange={onInputChange}\r\n                    />\r\n                </div>\r\n                <div className=\"task-edit\">\r\n                    <BiDotsHorizontalRounded onClick={editTask} />\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default TaskItem;","import React, { useState, ChangeEvent, KeyboardEvent } from 'react';\r\nimport './TaskForm.css';\r\nimport { useAppContext } from '../../context/AppContext';\r\nimport { MdAdd } from \"react-icons/md\";\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport { ListItem } from '../../interfaces/ListItem';\r\n\r\nconst TaskForm = () => {\r\n\r\n    const [taskName, setTaskName] = useState<string>(\"\");\r\n\r\n    const { taskLists, setTaskLists, selectedTaskList } = useAppContext();\r\n\r\n    const handleChange = (event: ChangeEvent<HTMLInputElement>): void => {\r\n        setTaskName(event.target.value);\r\n    }\r\n\r\n    const addTask = (event: KeyboardEvent): void => {\r\n        if (event.key === 'Enter' && /\\S/.test(taskName) && selectedTaskList && taskLists) {\r\n            const newTask: ListItem = {\r\n                listItemId: uuidv4(),\r\n                listItemName: taskName,\r\n                completed: false,\r\n                selected: false,\r\n                labels: {\r\n                    HIGH: false,\r\n                    MEDIUM: false,\r\n                    LOW: false\r\n                },\r\n            };\r\n            const newSelectedTaskList = taskLists[selectedTaskList];\r\n            const newTasks = [...newSelectedTaskList.listItems, newTask];\r\n            newSelectedTaskList.listItems = newTasks;\r\n            const newTaskLists = { ...taskLists };\r\n            newTaskLists[selectedTaskList] = newSelectedTaskList;\r\n            setTaskLists(newTaskLists);\r\n            setTaskName('');\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"task-form\">\r\n            <div className=\"task-form-container\">\r\n                <div className=\"icon-container\">\r\n                    <MdAdd />\r\n                </div>\r\n                <div className=\"input-container\">\r\n                    <input\r\n                        type=\"text\"\r\n                        name=\"task\"\r\n                        placeholder=\"Add a new task\"\r\n                        value={taskName}\r\n                        onChange={handleChange}\r\n                        onKeyDown={addTask}\r\n                        autoComplete=\"off\"\r\n                        maxLength={60}\r\n                    />\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default TaskForm;","import React, { useState, useEffect } from 'react';\r\nimport './TaskList.css';\r\nimport TaskItem from '../TaskItem/TaskItem';\r\nimport TaskForm from '../TaskForm/TaskForm';\r\nimport { useAppContext } from '../../context/AppContext';\r\nimport { MdList } from 'react-icons/md/'\r\nimport { ListItem } from '../../interfaces/ListItem';\r\n\r\nconst TaskList = () => {\r\n\r\n    const { taskLists, selectedTaskList } = useAppContext();\r\n\r\n    const [listName, setListName] = useState('');\r\n    const [numberOfTasks, setNumberOfTasks] = useState(0);\r\n    const [numberOfCompletedTasks, setNumberOfCompletedTasks] = useState(0);\r\n    const [taskItems, setTaskItems] = useState<ListItem[]>([]);\r\n\r\n    useEffect(() => {\r\n        if (taskLists !== null && selectedTaskList !== '') {\r\n            const { listName, listItems } = taskLists[selectedTaskList];\r\n            setListName(listName);\r\n            setNumberOfTasks(listItems.length);\r\n            setNumberOfCompletedTasks(countCompletedTasks(listItems));\r\n            setTaskItems(listItems);\r\n        }\r\n    }, [taskLists, selectedTaskList]);\r\n\r\n    const countCompletedTasks = (listItems: ListItem[]) => {\r\n        let count = 0;\r\n        for (const task of listItems) {\r\n            if (task.completed) {\r\n                count++;\r\n            }\r\n        }\r\n        return count;\r\n    }\r\n\r\n    const displayTaskList = () => {\r\n        const numCompletedTask = numberOfTasks ? `${numberOfTasks} tasks, ${numberOfCompletedTasks} completed` : `No tasks`;\r\n        if (listName) {\r\n            return (\r\n                <>\r\n                    <div>\r\n                        <div className=\"task-list-name\">{listName}</div>\r\n                        <div className=\"task-list-details\">{numCompletedTask}</div>\r\n                    </div>\r\n                    <div className=\"task-list-list\">\r\n                        <div className=\"task-list-list-content\">\r\n                            {taskItems.map((task, index) => <TaskItem key={index} task={task} />)}\r\n                        </div>\r\n                    </div>\r\n                    <div>\r\n                        <TaskForm />\r\n                    </div>\r\n                </>\r\n            );\r\n        } else {\r\n            return (\r\n                <div className=\"tasklists-empty\">\r\n                    <MdList className=\"icon\" />\r\n                    <div className=\"text\">Create a task list</div>\r\n                </div>\r\n            )\r\n        }\r\n\r\n    }\r\n\r\n    return (<div className=\"task-list\">{displayTaskList()}</div>);\r\n\r\n}\r\n\r\nexport default TaskList;","import React, { MouseEvent } from 'react';\r\nimport { MdRadioButtonUnchecked, MdRadioButtonChecked } from \"react-icons/md\";\r\nimport TaskLabel from '../TaskLabel/TaskLabel';\r\n\r\ninterface Props {\r\n    id: string;\r\n    selected: boolean;\r\n    handleClick: (event: MouseEvent<SVGAElement>) => void;\r\n    labelName: string;\r\n}\r\n\r\nconst TaskLabelFormItem = ({ id, selected, handleClick, labelName }: Props) => {\r\n    return (\r\n        <div className=\"task-label-container\">\r\n            <div className=\"task-label-radio\" >\r\n                {\r\n                    selected\r\n                        ?\r\n                        <MdRadioButtonChecked\r\n                            id={id}\r\n                            onClick={handleClick}\r\n                        />\r\n                        :\r\n                        <MdRadioButtonUnchecked\r\n                            id={id}\r\n                            onClick={handleClick}\r\n                        />\r\n                }\r\n            </div>\r\n            <TaskLabel labelName={labelName} />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default TaskLabelFormItem;","import React, { MouseEvent, useState, useEffect } from 'react';\r\nimport './TaskLabelForm.css';\r\nimport { useAppContext } from '../../context/AppContext';\r\nimport TaskLabelFormItem from '../TaskLabelFormItem/TaskLabelFormItem';\r\nimport { Labels } from '../../interfaces/Labels';\r\n\r\nconst TaskLabelForm = () => {\r\n\r\n    const {\r\n        taskLists,\r\n        selectedTaskList,\r\n        selectedTask,\r\n        setTaskLists,\r\n    } = useAppContext();\r\n\r\n    const [labels, setLabels] = useState<Labels>({\r\n        high: false,\r\n        medium: false,\r\n        low: false\r\n    });\r\n\r\n    useEffect(() => {\r\n        if (taskLists && selectedTask !== '') {\r\n            const { listItems } = taskLists[selectedTaskList];\r\n            for (const listItem of listItems) {\r\n                if (listItem.listItemId === selectedTask) {\r\n                    setLabels(listItem.labels);\r\n                }\r\n            }\r\n            return;\r\n        }\r\n    }, [taskLists, selectedTask, selectedTaskList]);\r\n\r\n    const handleClick = (event: MouseEvent<SVGAElement>) => {\r\n        if (taskLists !== null && selectedTaskList !== '' && selectedTask !== '') {\r\n            const newSelectedTaskList = taskLists[selectedTaskList];\r\n            const { listId, listItems } = newSelectedTaskList;\r\n            for (const newTask of [...listItems]) {\r\n                if (newTask.listItemId === selectedTask) {\r\n                    const clickedLabel = event.currentTarget.id;\r\n                    const newLabels = { ...labels };\r\n                    for (const label in newLabels) {\r\n                        if (label === clickedLabel) {\r\n                            newLabels[clickedLabel] = !newLabels[clickedLabel];\r\n                        } else {\r\n                            newLabels[label] = false;\r\n                        }\r\n                    }\r\n                    newTask.labels = newLabels;\r\n                    setLabels(newLabels);\r\n                    break;\r\n                }\r\n            }\r\n            const newTaskLists = { ...taskLists };\r\n            newTaskLists[listId] = newSelectedTaskList;\r\n            setTaskLists(newTaskLists);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div className=\"task-labels\">\r\n                <TaskLabelFormItem\r\n                    id=\"HIGH\"\r\n                    selected={labels.HIGH}\r\n                    handleClick={handleClick}\r\n                    labelName=\"High\"\r\n                />\r\n                <TaskLabelFormItem\r\n                    id=\"MEDIUM\"\r\n                    selected={labels.MEDIUM}\r\n                    handleClick={handleClick}\r\n                    labelName=\"Medium\"\r\n                />\r\n                <TaskLabelFormItem\r\n                    id=\"LOW\"\r\n                    selected={labels.LOW}\r\n                    handleClick={handleClick}\r\n                    labelName=\"Low\"\r\n                />\r\n            </div>\r\n        </div>\r\n    );\r\n\r\n}\r\n\r\nexport default TaskLabelForm;","import React from 'react';\r\nimport TaskLabelForm from '../TaskLabelForm/TaskLabelForm';\r\n\r\nconst TaskPanel = () => {\r\n    return (\r\n        <div>\r\n            <TaskLabelForm />\r\n            <div>Delete Task</div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default TaskPanel;","import React, { useState } from 'react';\r\nimport { AppContext } from './context/AppContext';\r\nimport './App.css';\r\nimport { Lists } from './interfaces/Lists';\r\nimport TaskListForm from './components/TaskListForm/TaskListForm';\r\nimport TaskListItems from './components/TaskListItems/TaskListItems';\r\nimport TaskList from './components/TaskList/TaskList';\r\nimport TaskPanel from './components/TaskPanel/TaskPanel';\r\n\r\nconst App = () => {\r\n\r\n  const [taskLists, setTaskLists] = useState<Lists | null>(null);\r\n  const [selectedTaskList, setSelectedTaskList] = useState('');\r\n  const [selectedTask, setSelectedTask] = useState('');\r\n\r\n  return (\r\n    <AppContext.Provider\r\n      value={{\r\n        taskLists,\r\n        setTaskLists,\r\n        selectedTaskList,\r\n        setSelectedTaskList,\r\n        selectedTask,\r\n        setSelectedTask\r\n      }}\r\n    >\r\n      <div className=\"app\">\r\n        <div className=\"app-content\">\r\n          <div className=\"tasklist-form-and-items\">\r\n            <TaskListForm />\r\n            <hr />\r\n            <TaskListItems />\r\n          </div>\r\n          <div className=\"display-tasklist\">\r\n            <TaskList />\r\n          </div>\r\n          <div className=\"task-panel\">\r\n            {selectedTask && <TaskPanel />}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </AppContext.Provider>\r\n  );\r\n\r\n}\r\n\r\nexport default App;","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}