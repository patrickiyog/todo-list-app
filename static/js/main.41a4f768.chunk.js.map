{"version":3,"sources":["context/AppContext.tsx","components/TaskListForm/TaskListForm.tsx","components/TaskListItem/TaskListItem.tsx","components/TaskListItems/TaskListItems.tsx","components/TaskItem/TaskItem.tsx","components/TaskForm/TaskForm.tsx","components/TaskList/TaskList.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["AppContext","createContext","taskLists","selectedTaskList","setTaskLists","setSelectedTaskList","useAppContext","useContext","TaskListForm","useState","taskListName","setTaskListName","className","placeholder","value","onChange","event","target","onKeyDown","key","test","id","uuidv4","newTaskList","listId","listName","listItems","newTaskLists","maxLength","TaskListItem","taskList","onClick","style","color","length","TaskListItems","Object","keys","taskListsArray","values","reverse","map","index","mapTaskListItem","TaskItem","task","newSelectedTaskList","newTasks","newTask","listItemId","completed","listItemName","filter","listItem","TaskForm","taskName","setTaskName","type","name","selected","autoComplete","TaskList","setListName","numberOfTasks","setNumberOfTasks","numberOfCompletedTasks","setNumberOfCompletedTasks","taskItems","setTaskItems","useEffect","countCompletedTasks","count","numCompletedTask","displayTaskList","App","Provider","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kSAUaA,EAAaC,wBAAuB,CAC7CC,UAAW,KACXC,iBAAkB,GAClBC,aAAc,aACdC,oBAAqB,eAGZC,EAAgB,kBAAMC,qBAAWP,I,6CCuC/BQ,EAjDM,WAEjB,MAAwCC,mBAAS,IAAjD,mBAAOC,EAAP,KAAqBC,EAArB,KAEA,EAIIL,IAHAJ,EADJ,EACIA,UACAE,EAFJ,EAEIA,aACAC,EAHJ,EAGIA,oBAuBJ,OACI,qBAAKO,UAAU,aAAf,SACI,sBAAKA,UAAU,2BAAf,UACI,qBAAKA,UAAU,iBAAf,SACI,cAAC,IAAD,MAEJ,uBACIC,YAAY,qBACZC,MAAOJ,EACPK,SA7BK,SAACC,GAClBL,EAAgBK,EAAMC,OAAOH,QA6BjBI,UA1BM,SAACF,GACnB,GAAkB,UAAdA,EAAMG,KAAmB,KAAKC,KAAKV,GAAe,CAClD,IAAMW,EAAKC,cACLC,EAAoB,CACtBC,OAAQH,EACRI,SAAUf,EACVgB,UAAW,IAETC,EAAY,eAAQzB,GAC1ByB,EAAaN,GAAME,EACnBnB,EAAauB,GACbtB,EAAoBgB,GACpBV,EAAgB,MAeRiB,UAAW,WCVhBC,G,MA7BM,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,SAEZN,EAAgCM,EAAhCN,OAAQC,EAAwBK,EAAxBL,SAAUC,EAAcI,EAAdJ,UAE1B,EAA6DpB,IAArDJ,EAAR,EAAQA,UAAWC,EAAnB,EAAmBA,iBAAkBE,EAArC,EAAqCA,oBAQrC,OACI,sBACIO,UAAU,iBACVmB,QATc,WACd7B,GACAG,EAAoBmB,IAQpBQ,MAAO,CACHC,MAAO9B,IAAqBqB,EAAS,UAAY,WAJzD,UAOI,8BAAMC,IACN,qBAAKb,UAAU,iBAAf,SACI,8BAAMc,EAAUQ,gBCPjBC,EApBO,WAElB,IAAQjC,EAAcI,IAAdJ,UAcR,OAAQ,8BAZgB,WACpB,GAAkB,OAAdA,GAAsBkC,OAAOC,KAAKnC,GAAWgC,OAAQ,CACrD,IAAMI,EAAiBF,OAAOG,OAAOrC,GAAWsC,UAChD,OACI,mCACKF,EAAeG,KAAI,SAACX,EAAUY,GAAX,OAAqB,cAAC,EAAD,CAA0BZ,SAAUA,GAAjBY,QAIxE,OAAO,KAGGC,M,sBCgDHC,G,MA1DE,SAAC,GAAqB,IAAnBC,EAAkB,EAAlBA,KAEhB,EAA2EvC,IAAnEJ,EAAR,EAAQA,UAAWC,EAAnB,EAAmBA,iBAAkBC,EAArC,EAAqCA,aAAcC,EAAnD,EAAmDA,oBAgCnD,OACI,qBAAKO,UAAU,OAAf,SACI,sBAAKA,UAAU,eAAf,UACI,qBACIA,UAAU,iBACVmB,QAnCK,WACjB,GAAIc,GAAsB,OAAd3C,GAA2C,KAArBC,EAAyB,CACvD,IADuD,EACjD2C,EAAsB5C,EAAUC,GAC9BqB,EAAsBsB,EAAtBtB,OAAQE,EAAcoB,EAAdpB,UACVqB,EAAQ,YAAOrB,GAHkC,cAIjCqB,GAJiC,IAIvD,2BAAgC,CAAC,IAAtBC,EAAqB,QACxBA,EAAQC,aAAeJ,EAAKI,aAC5BD,EAAQE,WAAaL,EAAKK,YANqB,8BASvD,IAAMvB,EAAY,eAAQzB,GAC1ByB,EAAaH,GAAUsB,EACvB1C,EAAauB,GACbtB,EAAoByC,EAAoBtB,UAoBpC,UAKY,OAAJqB,QAAI,IAAJA,OAAA,EAAAA,EAAMK,WACF,cAAC,IAAD,CAAmBtC,UAAU,mBAC7B,cAAC,IAAD,CAA+BA,UAAU,sBAGrD,sBAAMA,UAAU,YAAhB,gBACKiC,QADL,IACKA,OADL,EACKA,EAAMM,eAEX,qBAAKvC,UAAU,cAAcmB,QA7BxB,WACb,GAAIc,GAAsB,OAAd3C,GAA2C,KAArBC,EAAyB,CACvD,IAAM2C,EAAsB5C,EAAUC,GAC9BqB,EAAsBsB,EAAtBtB,OACFuB,EADwBD,EAAdpB,UACW0B,QAAO,SAAAC,GAAQ,OAAIA,EAASJ,aAAeJ,EAAKI,cACrEtB,EAAY,eAAQzB,GAC1B4C,EAAoBpB,UAAYqB,EAChCpB,EAAaH,GAAUsB,EACvB1C,EAAauB,GACbtB,EAAoByC,EAAoBtB,UAoBpC,SACI,cAAC,IAAD,CAAuBZ,UAAU,kBCHtC0C,G,MAnDE,WAEb,MAAgC7C,mBAAiB,IAAjD,mBAAO8C,EAAP,KAAiBC,EAAjB,KAEA,EAAsDlD,IAA9CJ,EAAR,EAAQA,UAAWE,EAAnB,EAAmBA,aAAcD,EAAjC,EAAiCA,iBAwBjC,OACI,qBAAKS,UAAU,YAAf,SACI,sBAAKA,UAAU,sBAAf,UACI,qBAAKA,UAAU,iBAAf,SACI,cAAC,IAAD,MAEJ,qBAAKA,UAAU,kBAAf,SACI,uBACI6C,KAAK,OACLC,KAAK,OACL7C,YAAY,iBACZC,MAAOyC,EACPxC,SAlCC,SAACC,GAClBwC,EAAYxC,EAAMC,OAAOH,QAkCTI,UA/BJ,SAACF,GACb,GAAkB,UAAdA,EAAMG,KAAmB,KAAKC,KAAKmC,IAAapD,GAAoBD,EAAW,CAC/E,IAAM8C,EAAoB,CACtBC,WAAY3B,cACZ6B,aAAcI,EACdL,WAAW,EACXS,UAAU,GAERb,EAAsB5C,EAAUC,GAChC4C,EAAQ,sBAAOD,EAAoBpB,WAA3B,CAAsCsB,IACpDF,EAAoBpB,UAAYqB,EAChC,IAAMpB,EAAY,eAAQzB,GAC1ByB,EAAaxB,GAAoB2C,EACjC1C,EAAauB,GACb6B,EAAY,MAkBAI,aAAa,MACbhC,UAAW,cCqBpBiC,EA/DE,WAEb,MAAwCvD,IAAhCJ,EAAR,EAAQA,UAAWC,EAAnB,EAAmBA,iBAEnB,EAAgCM,mBAAS,IAAzC,mBAAOgB,EAAP,KAAiBqC,EAAjB,KACA,EAA0CrD,mBAAS,GAAnD,mBAAOsD,EAAP,KAAsBC,EAAtB,KACA,EAA4DvD,mBAAS,GAArE,mBAAOwD,EAAP,KAA+BC,EAA/B,KACA,EAAkCzD,mBAAqB,IAAvD,mBAAO0D,EAAP,KAAkBC,EAAlB,KAEAC,qBAAU,WACN,GAAkB,OAAdnE,GAA2C,KAArBC,EAAyB,CAC/C,MAAgCD,EAAUC,GAAlCsB,EAAR,EAAQA,SAAUC,EAAlB,EAAkBA,UAClBoC,EAAYrC,GACZuC,EAAiBtC,EAAUQ,QAC3BgC,EAA0BI,EAAoB5C,IAC9C0C,EAAa1C,MAElB,CAACxB,EAAWC,IAEf,IAAMmE,EAAsB,SAAC5C,GACzB,IADmD,EAC/C6C,EAAQ,EADuC,cAEhC7C,GAFgC,IAEnD,2BAA8B,SACjBwB,WACLqB,KAJ2C,8BAOnD,OAAOA,GAiCX,OAAQ,qBAAK3D,UAAU,YAAf,SA9BgB,WACpB,IAAM4D,EAAmBT,EAAa,UAAMA,EAAN,mBAA8BE,EAA9B,yBACtC,OAAIxC,EAEI,qCACI,gCACI,qBAAKb,UAAU,iBAAf,SAAiCa,IACjC,qBAAKb,UAAU,oBAAf,SAAoC4D,OAExC,qBAAK5D,UAAU,iBAAf,SACI,qBAAKA,UAAU,yBAAf,SACKuD,EAAU1B,KAAI,SAACI,EAAMH,GAAP,OAAiB,cAAC,EAAD,CAAsBG,KAAMA,GAAbH,UAGvD,8BACI,cAAC,EAAD,SAMR,sBAAK9B,UAAU,kBAAf,UACI,cAAC,IAAD,CAAQA,UAAU,SAClB,qBAAKA,UAAU,OAAf,mCAOoB6D,MC5BzBC,EA/BH,WAEV,MAAkCjE,mBAAuB,MAAzD,mBAAOP,EAAP,KAAkBE,EAAlB,KACA,EAAgDK,mBAAS,IAAzD,mBAAON,EAAP,KAAyBE,EAAzB,KAEA,OACE,cAACL,EAAW2E,SAAZ,CACE7D,MAAO,CACLZ,YACAE,eACAD,mBACAE,uBALJ,SAQE,qBAAKO,UAAU,MAAf,SACE,sBAAKA,UAAU,cAAf,UACE,sBAAKA,UAAU,0BAAf,UACE,cAAC,EAAD,IACA,uBACA,cAAC,EAAD,OAEF,qBAAKA,UAAU,mBAAf,SACE,cAAC,EAAD,cChBGgE,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCJdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.41a4f768.chunk.js","sourcesContent":["import { createContext, useContext } from \"react\";\r\nimport { Lists } from \"../interfaces/Lists\";\r\n\r\nexport type AppType = {\r\n    taskLists: Lists | null;\r\n    selectedTaskList: string;\r\n    setTaskLists: (taskLists: Lists) => void;\r\n    setSelectedTaskList: (taskListId: string) => void;\r\n};\r\n\r\nexport const AppContext = createContext<AppType>({\r\n    taskLists: null,\r\n    selectedTaskList: '',\r\n    setTaskLists: () => { },\r\n    setSelectedTaskList: () => { },\r\n});\r\n\r\nexport const useAppContext = () => useContext(AppContext);","import React, { useState, ChangeEvent, KeyboardEvent } from 'react';\r\nimport './TaskListForm.css';\r\nimport { useAppContext } from '../../context/AppContext';\r\nimport { List } from '../../interfaces/List';\r\nimport { MdAdd } from \"react-icons/md\";\r\nimport { v4 as uuidv4 } from 'uuid';\r\n\r\nconst TaskListForm = () => {\r\n\r\n    const [taskListName, setTaskListName] = useState('');\r\n\r\n    const {\r\n        taskLists,\r\n        setTaskLists,\r\n        setSelectedTaskList\r\n    } = useAppContext();\r\n\r\n    const handleChange = (event: ChangeEvent<HTMLInputElement>): void => {\r\n        setTaskListName(event.target.value);\r\n    }\r\n\r\n    const handleKeyDown = (event: KeyboardEvent): void => {\r\n        if (event.key === 'Enter' && /\\S/.test(taskListName)) {\r\n            const id = uuidv4();\r\n            const newTaskList: List = {\r\n                listId: id,\r\n                listName: taskListName,\r\n                listItems: [],\r\n            };\r\n            const newTaskLists = { ...taskLists };\r\n            newTaskLists[id] = newTaskList;\r\n            setTaskLists(newTaskLists);\r\n            setSelectedTaskList(id);\r\n            setTaskListName('');\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"task-lists\">\r\n            <div className=\"task-list-item-container\">\r\n                <div className=\"icon-container\">\r\n                    <MdAdd />\r\n                </div>\r\n                <input\r\n                    placeholder=\"Create a task list\"\r\n                    value={taskListName}\r\n                    onChange={handleChange}\r\n                    onKeyDown={handleKeyDown}\r\n                    maxLength={20}\r\n                />\r\n            </div>\r\n        </div>\r\n    );\r\n\r\n}\r\n\r\nexport default TaskListForm;","import React from 'react';\r\nimport { List } from '../../interfaces/List';\r\nimport { useAppContext } from '../../context/AppContext';\r\nimport './TaskListItem.css';\r\n\r\ninterface Props {\r\n    taskList: List;\r\n}\r\n\r\nconst TaskListItem = ({ taskList }: Props) => {\r\n\r\n    const { listId, listName, listItems } = taskList;\r\n\r\n    const { taskLists, selectedTaskList, setSelectedTaskList } = useAppContext();\r\n\r\n    const handleOnClick = (): void => {\r\n        if (taskLists) {\r\n            setSelectedTaskList(listId);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div\r\n            className=\"task-list-item\"\r\n            onClick={handleOnClick}\r\n            style={{\r\n                color: selectedTaskList === listId ? '#FFFFFF' : '#b4b4b4',\r\n            }}\r\n        >\r\n            <div>{listName}</div>\r\n            <div className=\"task-list-size\">\r\n                <div>{listItems.length}</div>\r\n            </div>\r\n        </div>\r\n    );\r\n\r\n}\r\n\r\nexport default TaskListItem;","import React from 'react';\r\nimport { useAppContext } from '../../context/AppContext';\r\nimport TaskListItem from '../TaskListItem/TaskListItem';\r\n\r\nconst TaskListItems = () => {\r\n\r\n    const { taskLists } = useAppContext();\r\n\r\n    const mapTaskListItem = (): JSX.Element | null => {\r\n        if (taskLists !== null && Object.keys(taskLists).length) {\r\n            const taskListsArray = Object.values(taskLists).reverse();\r\n            return (\r\n                <>\r\n                    {taskListsArray.map((taskList, index) => <TaskListItem key={index} taskList={taskList} />)}\r\n                </>\r\n            );\r\n        }\r\n        return null;\r\n    }\r\n\r\n    return (<div>{mapTaskListItem()}</div>);\r\n\r\n}\r\n\r\nexport default TaskListItems;","import React from 'react';\r\nimport { ListItem } from '../../interfaces/ListItem';\r\nimport { MdOutlineCheckBoxOutlineBlank, MdOutlineCheckBox, MdRemoveCircleOutline } from \"react-icons/md\";\r\nimport { useAppContext } from '../../context/AppContext';\r\nimport './TaskItem.css';\r\n\r\ninterface Props {\r\n    task: ListItem | null;\r\n}\r\n\r\nconst TaskItem = ({ task }: Props) => {\r\n\r\n    const { taskLists, selectedTaskList, setTaskLists, setSelectedTaskList } = useAppContext();\r\n\r\n    const completeTask = () => {\r\n        if (task && taskLists !== null && selectedTaskList !== '') {\r\n            const newSelectedTaskList = taskLists[selectedTaskList];\r\n            const { listId, listItems } = newSelectedTaskList;\r\n            const newTasks = [...listItems];\r\n            for (const newTask of newTasks) {\r\n                if (newTask.listItemId === task.listItemId) {\r\n                    newTask.completed = !task.completed;\r\n                }\r\n            }\r\n            const newTaskLists = { ...taskLists };\r\n            newTaskLists[listId] = newSelectedTaskList;\r\n            setTaskLists(newTaskLists);\r\n            setSelectedTaskList(newSelectedTaskList.listId);\r\n        }\r\n    }\r\n\r\n    const onRemove = () => {\r\n        if (task && taskLists !== null && selectedTaskList !== '') {\r\n            const newSelectedTaskList = taskLists[selectedTaskList];\r\n            const { listId, listItems } = newSelectedTaskList;\r\n            const newTasks = listItems.filter(listItem => listItem.listItemId !== task.listItemId);\r\n            const newTaskLists = { ...taskLists };\r\n            newSelectedTaskList.listItems = newTasks;\r\n            newTaskLists[listId] = newSelectedTaskList;\r\n            setTaskLists(newTaskLists);\r\n            setSelectedTaskList(newSelectedTaskList.listId);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"task\">\r\n            <div className=\"task-content\">\r\n                <div\r\n                    className=\"task-completed\"\r\n                    onClick={completeTask}\r\n                >\r\n                    {\r\n                        task?.completed ?\r\n                            <MdOutlineCheckBox className=\"completed-true\" /> :\r\n                            <MdOutlineCheckBoxOutlineBlank className=\"completed-false\" />\r\n                    }\r\n                </div>\r\n                <span className=\"task-name\">\r\n                    {task?.listItemName}\r\n                </span>\r\n                <div className=\"task-remove\" onClick={onRemove}>\r\n                    <MdRemoveCircleOutline className=\"icon\" />\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default TaskItem;","import React, { useState, ChangeEvent, KeyboardEvent } from 'react';\r\nimport './TaskForm.css';\r\nimport { useAppContext } from '../../context/AppContext';\r\nimport { MdAdd } from \"react-icons/md\";\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport { ListItem } from '../../interfaces/ListItem';\r\n\r\nconst TaskForm = () => {\r\n\r\n    const [taskName, setTaskName] = useState<string>(\"\");\r\n\r\n    const { taskLists, setTaskLists, selectedTaskList } = useAppContext();\r\n\r\n    const handleChange = (event: ChangeEvent<HTMLInputElement>): void => {\r\n        setTaskName(event.target.value);\r\n    }\r\n\r\n    const addTask = (event: KeyboardEvent): void => {\r\n        if (event.key === 'Enter' && /\\S/.test(taskName) && selectedTaskList && taskLists) {\r\n            const newTask: ListItem = {\r\n                listItemId: uuidv4(),\r\n                listItemName: taskName,\r\n                completed: false,\r\n                selected: false,\r\n            };\r\n            const newSelectedTaskList = taskLists[selectedTaskList];\r\n            const newTasks = [...newSelectedTaskList.listItems, newTask];\r\n            newSelectedTaskList.listItems = newTasks;\r\n            const newTaskLists = { ...taskLists };\r\n            newTaskLists[selectedTaskList] = newSelectedTaskList;\r\n            setTaskLists(newTaskLists);\r\n            setTaskName('');\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"task-form\">\r\n            <div className=\"task-form-container\">\r\n                <div className=\"icon-container\">\r\n                    <MdAdd />\r\n                </div>\r\n                <div className=\"input-container\">\r\n                    <input\r\n                        type=\"text\"\r\n                        name=\"task\"\r\n                        placeholder=\"Add a new task\"\r\n                        value={taskName}\r\n                        onChange={handleChange}\r\n                        onKeyDown={addTask}\r\n                        autoComplete=\"off\"\r\n                        maxLength={60}\r\n                    />\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default TaskForm;","import React, { useState, useEffect } from 'react';\r\nimport './TaskList.css';\r\nimport TaskItem from '../TaskItem/TaskItem';\r\nimport TaskForm from '../TaskForm/TaskForm';\r\nimport { useAppContext } from '../../context/AppContext';\r\nimport { MdList } from 'react-icons/md/'\r\nimport { ListItem } from '../../interfaces/ListItem';\r\n\r\nconst TaskList = () => {\r\n\r\n    const { taskLists, selectedTaskList } = useAppContext();\r\n\r\n    const [listName, setListName] = useState('');\r\n    const [numberOfTasks, setNumberOfTasks] = useState(0);\r\n    const [numberOfCompletedTasks, setNumberOfCompletedTasks] = useState(0);\r\n    const [taskItems, setTaskItems] = useState<ListItem[]>([]);\r\n\r\n    useEffect(() => {\r\n        if (taskLists !== null && selectedTaskList !== '') {\r\n            const { listName, listItems } = taskLists[selectedTaskList];\r\n            setListName(listName);\r\n            setNumberOfTasks(listItems.length);\r\n            setNumberOfCompletedTasks(countCompletedTasks(listItems));\r\n            setTaskItems(listItems);\r\n        }\r\n    }, [taskLists, selectedTaskList]);\r\n\r\n    const countCompletedTasks = (listItems: ListItem[]) => {\r\n        let count = 0;\r\n        for (const task of listItems) {\r\n            if (task.completed) {\r\n                count++;\r\n            }\r\n        }\r\n        return count;\r\n    }\r\n\r\n    const displayTaskList = () => {\r\n        const numCompletedTask = numberOfTasks ? `${numberOfTasks} tasks, ${numberOfCompletedTasks} completed` : `No tasks`;\r\n        if (listName) {\r\n            return (\r\n                <>\r\n                    <div>\r\n                        <div className=\"task-list-name\">{listName}</div>\r\n                        <div className=\"task-list-details\">{numCompletedTask}</div>\r\n                    </div>\r\n                    <div className=\"task-list-list\">\r\n                        <div className=\"task-list-list-content\">\r\n                            {taskItems.map((task, index) => <TaskItem key={index} task={task} />)}\r\n                        </div>\r\n                    </div>\r\n                    <div>\r\n                        <TaskForm />\r\n                    </div>\r\n                </>\r\n            );\r\n        } else {\r\n            return (\r\n                <div className=\"tasklists-empty\">\r\n                    <MdList className=\"icon\" />\r\n                    <div className=\"text\">Create a task list</div>\r\n                </div>\r\n            )\r\n        }\r\n\r\n    }\r\n\r\n    return (<div className=\"task-list\">{displayTaskList()}</div>);\r\n\r\n}\r\n\r\nexport default TaskList;","import React, { useState } from 'react';\r\nimport { AppContext } from './context/AppContext';\r\nimport './App.css';\r\nimport { Lists } from './interfaces/Lists';\r\nimport TaskListForm from './components/TaskListForm/TaskListForm';\r\nimport TaskListItems from './components/TaskListItems/TaskListItems';\r\nimport TaskList from './components/TaskList/TaskList';\r\n\r\nconst App = () => {\r\n\r\n  const [taskLists, setTaskLists] = useState<Lists | null>(null);\r\n  const [selectedTaskList, setSelectedTaskList] = useState('');\r\n\r\n  return (\r\n    <AppContext.Provider\r\n      value={{\r\n        taskLists,\r\n        setTaskLists,\r\n        selectedTaskList,\r\n        setSelectedTaskList,\r\n      }}\r\n    >\r\n      <div className=\"app\">\r\n        <div className=\"app-content\">\r\n          <div className=\"tasklist-form-and-items\">\r\n            <TaskListForm />\r\n            <hr />\r\n            <TaskListItems />\r\n          </div>\r\n          <div className=\"display-tasklist\">\r\n            <TaskList />\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </AppContext.Provider>\r\n  );\r\n\r\n}\r\n\r\nexport default App;","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}