{"version":3,"sources":["context/AppContext.tsx","components/TaskListForm/TaskListForm.tsx","components/TaskListItem/TaskListItem.tsx","components/TaskListItems/TaskListItems.tsx","components/TaskLabel/TaskLabel.tsx","components/TaskLabelFormItem/TaskLabelFormItem.tsx","components/TaskLabelForm/TaskLabelForm.tsx","components/DeleteTaskButton/DeleteTaskButton.tsx","components/TaskPanel/TaskPanel.tsx","components/TaskItem/TaskItem.tsx","components/TaskForm/TaskForm.tsx","components/TaskList/TaskList.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["AppContext","createContext","taskLists","selectedTaskList","selectedTask","setTaskLists","setSelectedTaskList","setSelectedTask","useAppContext","useContext","TaskListForm","useState","taskListName","setTaskListName","className","placeholder","value","onChange","event","target","onKeyDown","key","test","id","uuidv4","newTaskList","listId","listName","listItems","newTaskLists","maxLength","TaskListItem","taskList","onClick","style","color","length","TaskListItems","Object","keys","taskListsArray","values","reverse","map","index","mapTaskListItem","TaskLabel","labelName","backgroundColor","TaskLabelFormItem","selected","handleClick","TaskLabelForm","high","medium","low","labels","setLabels","useEffect","listItem","listItemId","newSelectedTaskList","newTask","clickedLabel","currentTarget","newLabels","label","HIGH","MEDIUM","LOW","DeleteTaskButton","clickAway","newTasks","filter","task","TaskPanel","TaskItem","taskName","setTaskName","taskCompleted","setTaskCompleted","taskLabelColor","setTaskLabelColor","open","setOpen","listItemName","completed","handleTooltipClose","borderLeft","stopPropagation","isCompleted","newTaskName","onBlur","fontStyle","textDecoration","ClickAwayListener","onClickAway","Tooltip","title","onClose","disableFocusListener","disableHoverListener","disableTouchListener","arrow","placement","IconButton","TaskForm","type","name","autoComplete","TaskList","input","setInput","setListName","numberOfTasks","setNumberOfTasks","numberOfCompletedTasks","setNumberOfCompletedTasks","taskItems","setTaskItems","countCompletedTasks","count","onInputChange","changeTasklistName","newTasklists","onBlurChange","removeTasklist","numCompletedTask","displayTaskList","App","Provider","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.bc9ef024.chunk.js","sourcesContent":["import { createContext, useContext } from \"react\";\r\nimport { Lists } from \"../interfaces/Lists\";\r\n\r\nexport type AppType = {\r\n    taskLists: Lists | null;\r\n    selectedTaskList: string;\r\n    selectedTask: string;\r\n    setTaskLists: (taskLists: Lists) => void;\r\n    setSelectedTaskList: (taskListId: string) => void;\r\n    setSelectedTask: (taskId: string) => void;\r\n};\r\n\r\nexport const AppContext = createContext<AppType>({\r\n    taskLists: null,\r\n    selectedTaskList: '',\r\n    selectedTask: '',\r\n    setTaskLists: () => { },\r\n    setSelectedTaskList: () => { },\r\n    setSelectedTask: () => { },\r\n});\r\n\r\nexport const useAppContext = () => useContext(AppContext);","import React, { useState, ChangeEvent, KeyboardEvent } from 'react';\r\nimport './TaskListForm.css';\r\nimport { useAppContext } from '../../context/AppContext';\r\nimport { List } from '../../interfaces/List';\r\nimport { v4 as uuidv4 } from 'uuid';\r\n\r\nconst TaskListForm = () => {\r\n\r\n    const [taskListName, setTaskListName] = useState('');\r\n\r\n    const {\r\n        taskLists,\r\n        setTaskLists,\r\n        setSelectedTaskList,\r\n        setSelectedTask\r\n    } = useAppContext();\r\n\r\n    const handleChange = (event: ChangeEvent<HTMLInputElement>): void => {\r\n        setTaskListName(event.target.value);\r\n    }\r\n\r\n    const handleKeyDown = (event: KeyboardEvent): void => {\r\n        if (event.key === 'Enter' && /\\S/.test(taskListName)) {\r\n            const id = uuidv4();\r\n            const newTaskList: List = {\r\n                listId: id,\r\n                listName: taskListName,\r\n                listItems: [],\r\n            };\r\n            const newTaskLists = { ...taskLists };\r\n            newTaskLists[id] = newTaskList;\r\n            setTaskLists(newTaskLists);\r\n            setSelectedTaskList(id);\r\n            setSelectedTask('');\r\n            setTaskListName('');\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"task-lists\">\r\n            <div className=\"task-list-item-container\">\r\n                <input\r\n                    placeholder=\"Create a task list\"\r\n                    value={taskListName}\r\n                    onChange={handleChange}\r\n                    onKeyDown={handleKeyDown}\r\n                    maxLength={20}\r\n                />\r\n            </div>\r\n        </div>\r\n    );\r\n\r\n}\r\n\r\nexport default TaskListForm;","import React from 'react';\r\nimport { List } from '../../interfaces/List';\r\nimport { useAppContext } from '../../context/AppContext';\r\nimport './TaskListItem.css';\r\n\r\ninterface Props {\r\n    taskList: List;\r\n}\r\n\r\nconst TaskListItem = ({ taskList }: Props) => {\r\n\r\n    const { listId, listName, listItems } = taskList;\r\n\r\n    const {\r\n        taskLists,\r\n        selectedTaskList,\r\n        setSelectedTaskList,\r\n        setSelectedTask\r\n    } = useAppContext();\r\n\r\n    const handleOnClick = (): void => {\r\n        if (taskLists) {\r\n            setSelectedTaskList(listId);\r\n            setSelectedTask('');\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div\r\n            className=\"task-list-item\"\r\n            onClick={handleOnClick}\r\n            style={{\r\n                color: selectedTaskList === listId ? '#FFFFFF' : '#b4b4b4',\r\n            }}\r\n        >\r\n            <div>{listName}</div>\r\n            <div className=\"task-list-size\">\r\n                <div>{listItems.length}</div>\r\n            </div>\r\n        </div>\r\n    );\r\n\r\n}\r\n\r\nexport default TaskListItem;","import React from 'react';\r\nimport './TaskListItems.css';\r\nimport { useAppContext } from '../../context/AppContext';\r\nimport TaskListItem from '../TaskListItem/TaskListItem';\r\n\r\nconst TaskListItems = () => {\r\n\r\n    const { taskLists } = useAppContext();\r\n\r\n    const mapTaskListItem = (): JSX.Element | null => {\r\n        if (taskLists !== null && Object.keys(taskLists).length) {\r\n            const taskListsArray = Object.values(taskLists).reverse();\r\n            return (\r\n                <>\r\n                    {taskListsArray.map((taskList, index) => <TaskListItem key={index} taskList={taskList} />)}\r\n                </>\r\n            );\r\n        }\r\n        return null;\r\n    }\r\n\r\n    return (<div className=\"task-list-items\">{mapTaskListItem()}</div>);\r\n\r\n}\r\n\r\nexport default TaskListItems;","import React from 'react';\r\nimport './TaskLabel.css';\r\n\r\ninterface Props {\r\n    labelName: string;\r\n}\r\n\r\nconst TaskLabel = ({ labelName }: Props) => {\r\n\r\n    const getLabelColour = () => {\r\n        if (labelName === 'High') {\r\n            return '#c62828';\r\n        }\r\n        if (labelName === 'Medium') {\r\n            return '#ff6f00';\r\n        }\r\n        if (labelName === 'Low') {\r\n            return '#43a047';\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div\r\n            className=\"task-label\"\r\n            style={{\r\n                backgroundColor: getLabelColour()\r\n            }}\r\n        >\r\n            {labelName}\r\n        </div>\r\n    );\r\n\r\n}\r\n\r\nexport default TaskLabel;","import React, { MouseEvent } from 'react';\r\nimport { MdRadioButtonUnchecked, MdRadioButtonChecked } from \"react-icons/md\";\r\nimport './TaskLabelFormItem.css';\r\nimport TaskLabel from '../TaskLabel/TaskLabel';\r\n\r\ninterface Props {\r\n    id: string;\r\n    selected: boolean;\r\n    handleClick: (event: MouseEvent<HTMLDivElement>) => void;\r\n    labelName: string;\r\n}\r\n\r\nconst TaskLabelFormItem = ({ id, selected, handleClick, labelName }: Props) => {\r\n    return (\r\n        <div className=\"task-label-container\" id={id} onClick={handleClick}>\r\n            <div className=\"task-label-radio\" >\r\n                {\r\n                    selected\r\n                        ?\r\n                        <MdRadioButtonChecked />\r\n                        :\r\n                        <MdRadioButtonUnchecked />\r\n                }\r\n            </div>\r\n            <TaskLabel labelName={labelName} />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default TaskLabelFormItem;","import React, { MouseEvent, useState, useEffect } from 'react';\r\nimport './TaskLabelForm.css';\r\nimport { useAppContext } from '../../context/AppContext';\r\nimport TaskLabelFormItem from '../TaskLabelFormItem/TaskLabelFormItem';\r\nimport { Labels } from '../../interfaces/Labels';\r\n\r\nconst TaskLabelForm = () => {\r\n\r\n    const {\r\n        taskLists,\r\n        selectedTaskList,\r\n        selectedTask,\r\n        setTaskLists,\r\n    } = useAppContext();\r\n\r\n    const [labels, setLabels] = useState<Labels>({\r\n        high: false,\r\n        medium: false,\r\n        low: false\r\n    });\r\n\r\n    useEffect(() => {\r\n        if (taskLists && selectedTask !== '') {\r\n            const { listItems } = taskLists[selectedTaskList];\r\n            for (const listItem of listItems) {\r\n                if (listItem.listItemId === selectedTask) {\r\n                    setLabels(listItem.labels);\r\n                }\r\n            }\r\n            return;\r\n        }\r\n    }, [taskLists, selectedTask, selectedTaskList]);\r\n\r\n    const handleClick = (event: MouseEvent<HTMLDivElement>) => {\r\n        if (taskLists !== null && selectedTaskList !== '' && selectedTask !== '') {\r\n            const newSelectedTaskList = taskLists[selectedTaskList];\r\n            const { listId, listItems } = newSelectedTaskList;\r\n            for (const newTask of [...listItems]) {\r\n                if (newTask.listItemId === selectedTask) {\r\n                    const clickedLabel = event.currentTarget.id;\r\n                    const newLabels = { ...labels };\r\n                    for (const label in newLabels) {\r\n                        if (label === clickedLabel) {\r\n                            newLabels[clickedLabel] = !newLabels[clickedLabel];\r\n                        } else {\r\n                            newLabels[label] = false;\r\n                        }\r\n                    }\r\n                    newTask.labels = newLabels;\r\n                    setLabels(newLabels);\r\n                    break;\r\n                }\r\n            }\r\n            const newTaskLists = { ...taskLists };\r\n            newTaskLists[listId] = newSelectedTaskList;\r\n            setTaskLists(newTaskLists);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div>\r\n                <TaskLabelFormItem\r\n                    id=\"HIGH\"\r\n                    selected={labels.HIGH}\r\n                    handleClick={handleClick}\r\n                    labelName=\"High\"\r\n                />\r\n            </div>\r\n            <div className=\"task-label-form-item-center\">\r\n                <TaskLabelFormItem\r\n                    id=\"MEDIUM\"\r\n                    selected={labels.MEDIUM}\r\n                    handleClick={handleClick}\r\n                    labelName=\"Medium\"\r\n                />\r\n            </div>\r\n            <div>\r\n                <TaskLabelFormItem\r\n                    id=\"LOW\"\r\n                    selected={labels.LOW}\r\n                    handleClick={handleClick}\r\n                    labelName=\"Low\"\r\n                />\r\n            </div>\r\n        </div>\r\n    );\r\n\r\n}\r\n\r\nexport default TaskLabelForm;","import React from 'react';\r\nimport './DeleteTaskButton.css';\r\nimport { useAppContext } from '../../context/AppContext';\r\nimport { MdDelete } from \"react-icons/md\";\r\n\r\ninterface Props {\r\n    clickAway: () => void;\r\n}\r\n\r\nconst DeleteTaskButton = ({ clickAway }: Props) => {\r\n\r\n    const { taskLists, setTaskLists, selectedTaskList, selectedTask } = useAppContext();\r\n\r\n    const handleOnClick = () => {\r\n        if (selectedTaskList && taskLists) {\r\n            const newSelectedTaskList = taskLists[selectedTaskList];\r\n            const newTasks = newSelectedTaskList.listItems.filter(task => task.listItemId !== selectedTask);\r\n            newSelectedTaskList.listItems = newTasks;\r\n            const newTaskLists = { ...taskLists };\r\n            newTaskLists[selectedTaskList] = newSelectedTaskList;\r\n            setTaskLists(newTaskLists);\r\n            clickAway();\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div\r\n            className=\"delete-task\"\r\n            onClick={handleOnClick}\r\n        >\r\n            <div className=\"delete-task-text\">\r\n                Remove Task\r\n            </div>\r\n            <div className=\"delete-task-icon\">\r\n                <MdDelete />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default DeleteTaskButton;","import React from 'react';\r\nimport './TaskPanel.css';\r\nimport TaskLabelForm from '../TaskLabelForm/TaskLabelForm';\r\nimport DeleteTaskButton from '../DeleteTaskButton/DeleteTaskButton';\r\n\r\ninterface Props {\r\n    clickAway: () => void;\r\n}\r\n\r\nconst TaskPanel = ({ clickAway }: Props) => {\r\n    return (\r\n        <div className=\"task-panel-component\">\r\n            <TaskLabelForm />\r\n            <div className=\"horizontal-line-container\">\r\n                <hr />\r\n            </div>\r\n            <DeleteTaskButton clickAway={clickAway} />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default TaskPanel;","import React, { useState, useEffect, ChangeEvent, SyntheticEvent } from 'react';\r\nimport './TaskItem.css';\r\nimport { useAppContext } from '../../context/AppContext';\r\nimport { ListItem } from '../../interfaces/ListItem';\r\nimport { MdOutlineCheckBoxOutlineBlank, MdOutlineCheckBox } from \"react-icons/md\";\r\nimport { IconButton, Tooltip, ClickAwayListener } from '@mui/material';\r\nimport { HiOutlineDotsVertical } from \"react-icons/hi\";\r\nimport TaskPanel from '../TaskPanel/TaskPanel';\r\n\r\ninterface Props {\r\n    task: ListItem | null;\r\n}\r\n\r\nconst TaskItem = ({ task }: Props) => {\r\n\r\n    const [taskName, setTaskName] = useState('');\r\n    const [taskCompleted, setTaskCompleted] = useState(false);\r\n    const [taskLabelColor, setTaskLabelColor] = useState('');\r\n    const [open, setOpen] = useState(false);\r\n\r\n    const {\r\n        taskLists,\r\n        selectedTaskList,\r\n        setTaskLists,\r\n        setSelectedTaskList,\r\n        setSelectedTask,\r\n    } = useAppContext();\r\n\r\n    useEffect(() => {\r\n        if (task !== null) {\r\n            setTaskName(task.listItemName);\r\n            setTaskCompleted(task.completed);\r\n            for (const label in task.labels) {\r\n                if (task.labels[label] === true) {\r\n                    if (label === 'HIGH') {\r\n                        setTaskLabelColor('#c62828');\r\n                        break;\r\n                    }\r\n                    if (label === 'MEDIUM') {\r\n                        setTaskLabelColor('#ff6f00');\r\n                        break;\r\n                    }\r\n                    if (label === 'LOW') {\r\n                        setTaskLabelColor('#43a047');\r\n                        break;\r\n                    }\r\n                } else {\r\n                    setTaskLabelColor('#212121');\r\n                }\r\n            }\r\n        }\r\n    }, [task, taskLists]);\r\n\r\n    const completeTask = (event: SyntheticEvent) => {\r\n        event.stopPropagation();\r\n        if (task && taskLists !== null && selectedTaskList !== '') {\r\n            const newSelectedTaskList = taskLists[selectedTaskList];\r\n            const { listId, listItems } = newSelectedTaskList;\r\n            const newTasks = [...listItems];\r\n            for (const newTask of newTasks) {\r\n                if (newTask.listItemId === task.listItemId) {\r\n                    const isCompleted = !task.completed;\r\n                    setTaskCompleted(isCompleted)\r\n                    newTask.completed = isCompleted;\r\n                }\r\n            }\r\n            const newTaskLists = { ...taskLists };\r\n            newTaskLists[listId] = newSelectedTaskList;\r\n            setTaskLists(newTaskLists);\r\n            setSelectedTaskList(newSelectedTaskList.listId);\r\n        }\r\n    }\r\n\r\n    const onInputChange = (event: ChangeEvent<HTMLInputElement>) => {\r\n        if (task && taskLists !== null && selectedTaskList !== '') {\r\n            const newSelectedTaskList = taskLists[selectedTaskList];\r\n            const { listId, listItems } = newSelectedTaskList;\r\n            const newTasks = [...listItems];\r\n            const newTaskName = event.target.value;\r\n            for (const newTask of newTasks) {\r\n                if (newTask.listItemId === task.listItemId) {\r\n                    setTaskName(newTaskName)\r\n                    newTask.listItemName = (newTaskName);\r\n                    break;\r\n                }\r\n            }\r\n            const newTaskLists = { ...taskLists };\r\n            newTaskLists[listId] = newSelectedTaskList;\r\n            setTaskLists(newTaskLists);\r\n            setSelectedTaskList(newSelectedTaskList.listId);\r\n            setSelectedTask(task.listItemId);\r\n        }\r\n    }\r\n\r\n    const onInputClick = (event: SyntheticEvent) => {\r\n        event.stopPropagation();\r\n        if (task) {\r\n            setSelectedTask(task.listItemId);\r\n            return;\r\n        }\r\n    }\r\n\r\n    const selectTask = () => {\r\n        if (task) {\r\n            setSelectedTask(task.listItemId);\r\n            return;\r\n        }\r\n    }\r\n\r\n    const onBlurChange = () => {\r\n        if (taskName === '') {\r\n            if (task && taskLists !== null && selectedTaskList !== '') {\r\n                const newSelectedTaskList = taskLists[selectedTaskList];\r\n                const { listId, listItems } = newSelectedTaskList;\r\n                const newTasks = [...listItems].filter(newTask => newTask.listItemId !== task.listItemId);\r\n                const newTaskLists = { ...taskLists };\r\n                newTaskLists[listId] = newSelectedTaskList;\r\n                newSelectedTaskList.listItems = newTasks;\r\n                setTaskLists(newTaskLists);\r\n                setSelectedTaskList(newSelectedTaskList.listId);\r\n                setSelectedTask(task.listItemId);\r\n            }\r\n        }\r\n    }\r\n\r\n    const handleTooltipOpen = () => {\r\n        setOpen(true);\r\n    }\r\n\r\n    const handleTooltipClose = () => {\r\n        setOpen(false);\r\n    }\r\n\r\n    return (\r\n        <div\r\n            className=\"task\"\r\n            onClick={selectTask}\r\n            style={{\r\n                borderLeft: `5px solid ${taskLabelColor}`,\r\n            }}\r\n        >\r\n            <div className=\"task-content-container\">\r\n                <div className=\"task-content\">\r\n                    <div className=\"task-completed\" onClick={completeTask}>\r\n                        {\r\n                            taskCompleted ?\r\n                                <MdOutlineCheckBox className=\"completed-true\" /> :\r\n                                <MdOutlineCheckBoxOutlineBlank className=\"completed-false\" />\r\n                        }\r\n                    </div>\r\n                    <input\r\n                        className=\"task-name\"\r\n                        value={taskName}\r\n                        onClick={onInputClick}\r\n                        onChange={onInputChange}\r\n                        onBlur={onBlurChange}\r\n                        style={{\r\n                            color: taskCompleted ? '#a4a4a4' : '#ffffff',\r\n                            fontStyle: taskCompleted ? 'italic' : 'normal',\r\n                            textDecoration: taskCompleted ? 'line-through' : 'none',\r\n                        }}\r\n                    />\r\n                </div>\r\n                <ClickAwayListener onClickAway={handleTooltipClose}>\r\n                    <div className=\"three-dot-menu\" >\r\n                        <div>\r\n                            <Tooltip\r\n                                title={<TaskPanel clickAway={handleTooltipClose} />}\r\n                                onClose={handleTooltipClose}\r\n                                open={open}\r\n                                disableFocusListener\r\n                                disableHoverListener\r\n                                disableTouchListener\r\n                                arrow\r\n                                placement=\"right\"\r\n                            >\r\n                                <IconButton onClick={handleTooltipOpen}>\r\n                                    <HiOutlineDotsVertical />\r\n                                </IconButton>\r\n                            </Tooltip>\r\n                        </div>\r\n                    </div>\r\n                </ClickAwayListener>\r\n            </div>\r\n        </div >\r\n    );\r\n}\r\n\r\nexport default TaskItem;","import React, { useState, ChangeEvent, KeyboardEvent } from 'react';\r\nimport './TaskForm.css';\r\nimport { useAppContext } from '../../context/AppContext';\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport { ListItem } from '../../interfaces/ListItem';\r\n\r\nconst TaskForm = () => {\r\n\r\n    const [taskName, setTaskName] = useState<string>(\"\");\r\n\r\n    const { taskLists, setTaskLists, selectedTaskList } = useAppContext();\r\n\r\n    const handleChange = (event: ChangeEvent<HTMLInputElement>): void => {\r\n        setTaskName(event.target.value);\r\n    }\r\n\r\n    const addTask = (event: KeyboardEvent): void => {\r\n        if (event.key === 'Enter' && /\\S/.test(taskName) && selectedTaskList && taskLists) {\r\n            const newTask: ListItem = {\r\n                listItemId: uuidv4(),\r\n                listItemName: taskName,\r\n                completed: false,\r\n                selected: false,\r\n                labels: {\r\n                    HIGH: false,\r\n                    MEDIUM: false,\r\n                    LOW: false\r\n                },\r\n            };\r\n            const newSelectedTaskList = taskLists[selectedTaskList];\r\n            const newTasks = [...newSelectedTaskList.listItems, newTask];\r\n            newSelectedTaskList.listItems = newTasks;\r\n            const newTaskLists = { ...taskLists };\r\n            newTaskLists[selectedTaskList] = newSelectedTaskList;\r\n            setTaskLists(newTaskLists);\r\n            setTaskName('');\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"task-form\">\r\n            <div className=\"task-form-container\">\r\n                <div className=\"input-container\">\r\n                    <input\r\n                        type=\"text\"\r\n                        name=\"task\"\r\n                        placeholder=\"Add a new task\"\r\n                        value={taskName}\r\n                        onChange={handleChange}\r\n                        onKeyDown={addTask}\r\n                        autoComplete=\"off\"\r\n                    />\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default TaskForm;","import React, { useState, useEffect, ChangeEvent, KeyboardEvent } from 'react';\r\nimport './TaskList.css';\r\nimport TaskItem from '../TaskItem/TaskItem';\r\nimport TaskForm from '../TaskForm/TaskForm';\r\nimport { useAppContext } from '../../context/AppContext';\r\nimport { MdDelete } from \"react-icons/md\";\r\nimport { ListItem } from '../../interfaces/ListItem';\r\n\r\nconst TaskList = () => {\r\n\r\n    const {\r\n        taskLists,\r\n        setTaskLists,\r\n        selectedTaskList,\r\n        setSelectedTaskList\r\n    } = useAppContext();\r\n\r\n    const [input, setInput] = useState('');\r\n    const [listName, setListName] = useState('');\r\n    const [numberOfTasks, setNumberOfTasks] = useState(0);\r\n    const [numberOfCompletedTasks, setNumberOfCompletedTasks] = useState(0);\r\n    const [taskItems, setTaskItems] = useState<ListItem[]>([]);\r\n\r\n    useEffect(() => {\r\n        if (taskLists !== null && selectedTaskList !== '') {\r\n            const { listName, listItems } = taskLists[selectedTaskList];\r\n            setInput(listName);\r\n            setListName(listName);\r\n            setNumberOfTasks(listItems.length);\r\n            setNumberOfCompletedTasks(countCompletedTasks(listItems));\r\n            setTaskItems(listItems);\r\n        }\r\n    }, [taskLists, selectedTaskList]);\r\n\r\n    const countCompletedTasks = (listItems: ListItem[]) => {\r\n        let count = 0;\r\n        for (const task of listItems) {\r\n            if (task.completed) {\r\n                count++;\r\n            }\r\n        }\r\n        return count;\r\n    }\r\n\r\n    const onInputChange = (event: ChangeEvent<HTMLInputElement>) => {\r\n        setInput(event.target.value);\r\n    }\r\n\r\n    const changeTasklistName = () => {\r\n        if (taskLists) {\r\n            const newTasklists = { ...taskLists };\r\n            newTasklists[selectedTaskList].listName = input;\r\n            setTaskLists(newTasklists);\r\n            setListName('');\r\n        }\r\n    }\r\n\r\n    const onKeyDown = (event: KeyboardEvent) => {\r\n        if (event.key === 'Enter') {\r\n            input !== '' ? changeTasklistName() : setInput(listName);\r\n        }\r\n    }\r\n\r\n    const onBlurChange = () => {\r\n        input !== '' ? changeTasklistName() : setInput(listName);\r\n    }\r\n\r\n    const removeTasklist = () => {\r\n        if (taskLists) {\r\n            const newTasklists = { ...taskLists };\r\n            delete newTasklists[selectedTaskList];\r\n            setTaskLists(newTasklists);\r\n            setSelectedTaskList('');\r\n            setInput('');\r\n            setListName('');\r\n        }\r\n    }\r\n\r\n    const displayTaskList = () => {\r\n        if (listName) {\r\n            const numCompletedTask = numberOfTasks\r\n                ? `${numberOfTasks} tasks, ${numberOfCompletedTasks} completed`\r\n                : `No tasks`;\r\n            return (\r\n                <>\r\n                    <div className=\"task-list-name-details\">\r\n                        <div className=\"task-list-name-and-delete\">\r\n                            <div>\r\n                                <input\r\n                                    className=\"task-list-name\"\r\n                                    value={input}\r\n                                    onChange={onInputChange}\r\n                                    onKeyDown={onKeyDown}\r\n                                    onBlur={onBlurChange}\r\n                                    maxLength={20}\r\n                                />\r\n                            </div>\r\n                            <div\r\n                                className=\"delete-tasklist-icon-button\"\r\n                                onClick={removeTasklist}\r\n                            >\r\n                                <MdDelete />\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"task-list-details\">{numCompletedTask}</div>\r\n                    </div>\r\n                    <div className=\"task-list-list\">\r\n                        <div className=\"task-list-list-content\">\r\n                            {taskItems.map((task, index) => <TaskItem key={index} task={task} />)}\r\n                        </div>\r\n                    </div>\r\n                    <div>\r\n                        <TaskForm />\r\n                    </div>\r\n                </>\r\n            );\r\n        }\r\n    }\r\n\r\n    return (<div className=\"task-list\">{displayTaskList()}</div>);\r\n\r\n}\r\n\r\nexport default TaskList;","import React, { useState } from 'react';\r\nimport { AppContext } from './context/AppContext';\r\nimport './App.css';\r\nimport { Lists } from './interfaces/Lists';\r\nimport TaskListForm from './components/TaskListForm/TaskListForm';\r\nimport TaskListItems from './components/TaskListItems/TaskListItems';\r\nimport TaskList from './components/TaskList/TaskList';\r\n\r\nconst App = () => {\r\n\r\n  const [taskLists, setTaskLists] = useState<Lists | null>(null);\r\n  const [selectedTaskList, setSelectedTaskList] = useState('');\r\n  const [selectedTask, setSelectedTask] = useState('');\r\n\r\n  return (\r\n    <AppContext.Provider\r\n      value={{\r\n        taskLists,\r\n        setTaskLists,\r\n        selectedTaskList,\r\n        setSelectedTaskList,\r\n        selectedTask,\r\n        setSelectedTask\r\n      }}\r\n    >\r\n      <div className=\"app\">\r\n        <div className=\"app-content\">\r\n          <div className=\"left\">\r\n            <TaskListForm />\r\n            <TaskListItems />\r\n          </div>\r\n          <div className=\"centre\">\r\n            <TaskList />\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </AppContext.Provider>\r\n  );\r\n\r\n}\r\n\r\nexport default App;","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}